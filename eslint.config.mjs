import globals from 'globals';
import stylisticJs from '@stylistic/eslint-plugin-js';
import tsParser from '@typescript-eslint/parser';
import tseslint from '@typescript-eslint/eslint-plugin';

export default [
  {
    files: ['src/**/*.{js,mjs,cjs,ts}', '**/eslint.config.mjs'],
    ignores: ['**/migrations/*'],
    languageOptions: { parser: tsParser, globals: {
      ...globals.node,
    } },
    plugins: {
      '@typescript-eslint': tseslint,
      '@stylistic/js': stylisticJs,
    },
    rules: {
      'sort-imports': [
        'error',
        {
          ignoreCase: false,
          ignoreDeclarationSort: false,
          ignoreMemberSort: false,
          memberSyntaxSortOrder: ['none', 'all', 'multiple', 'single'],
          allowSeparatedGroups: true,
        },
      ],
      'semi': ['error', 'always'],
      'indent': ['error', 2],
      'prefer-const': 'error',
      'comma-dangle': ['error', 'always-multiline'],
      'no-nested-ternary': 'error',
      'no-dupe-class-members': ['error'],
      'no-undef': ['error'],
      'no-array-constructor': 'off',
      'no-use-before-define': ['error', { functions: false, classes: true }],
      'no-unused-vars': 'off',
      'no-useless-constructor': 'off',
      'no-shadow': ['warn'],
      'no-await-in-loop': 'warn',
      'no-restricted-globals': 'warn',
      'no-plusplus': 'warn',
      'no-param-reassign': 'warn',
      'class-methods-use-this': 'off',
      'no-void': 'warn',
      '@typescript-eslint/no-unused-vars': [
        'warn',
        {
          vars: 'all',
          args: 'after-used',
          ignoreRestSiblings: true,
          varsIgnorePattern: '^_',
          argsIgnorePattern: '^_',
        },
      ],
      '@typescript-eslint/explicit-module-boundary-types': 'off',
      'quotes': ['error', 'single'],
      'no-restricted-syntax': 'warn',
      'no-continue': 'warn',
      'no-prototype-builtins': 'warn',
      'operator-assignment': 'warn',
      'no-underscore-dangle': 'off',
      'lines-between-class-members': 'off',
      'prefer-object-spread': 'warn',
      'max-classes-per-file': 'warn',
      'global-require': 'warn',
      'spaced-comment': 'warn',
      'function-paren-newline': 'off',
      'prefer-regex-literals': 'warn',
      'quote-props': ['error', 'consistent'],
      'no-useless-escape': 'warn',
      'no-self-compare': 'warn',
      'space-infix-ops': 'error',
      'no-template-curly-in-string': 'warn',
      'linebreak-style': 'off',
      'dot-notation': 'off',
      'strict': 'off',
      'object-curly-newline': 'off',
      'no-unused-expressions': 'off',
      'arrow-body-style': ['warn', 'as-needed'],
      'arrow-parens': ['error', 'as-needed'],
      'arrow-spacing': [
        'error',
        {
          before: true,
          after: true,
        },
      ],
      'no-var': 'error',
      'object-curly-spacing': ['error', 'always'],
      'array-bracket-spacing': ['error', 'never'],
      'block-spacing': ['error', 'always'],
      'space-before-blocks': ['error', 'always'],
      'computed-property-spacing': ['error', 'never'],
      'rest-spread-spacing': ['error', 'never'],
      'template-curly-spacing': ['error', 'never'],
      'keyword-spacing': 'off',
      '@stylistic/js/keyword-spacing': ['error', { before: true, after: true }],
      'no-trailing-spaces': ['error'],
      'camelcase': [
        'error',
        {
          properties: 'never',
          allow: ['child_process'],
        },
      ],
      'space-in-parens': [
        'off',
        'never',
        {
          exceptions: ['()'],
        },
      ],
      'max-len': ['warn', { code: 120 }],
      'padding-line-between-statements': [
        'warn',
        {
          blankLine: 'always',
          prev: 'directive',
          next: '*',
        },
        {
          blankLine: 'any',
          prev: 'directive',
          next: 'directive',
        },
        {
          blankLine: 'always',
          prev: 'import',
          next: '*',
        },
        {
          blankLine: 'any',
          prev: 'import',
          next: 'import',
        },
        {
          blankLine: 'always',
          prev: '*',
          next: ['const', 'let', 'var', 'export'],
        },
        {
          blankLine: 'always',
          prev: ['const', 'let', 'var', 'export'],
          next: '*',
        },
        {
          blankLine: 'any',
          prev: ['const', 'let', 'var', 'export'],
          next: ['const', 'let', 'var', 'export'],
        },
        {
          blankLine: 'always',
          prev: '*',
          next: ['if', 'class', 'for', 'do', 'while', 'switch', 'try'],
        },
        {
          blankLine: 'always',
          prev: ['if', 'class', 'for', 'do', 'while', 'switch', 'try'],
          next: '*',
        },
        {
          blankLine: 'always',
          prev: '*',
          next: 'return',
        },
        {
          blankLine: 'always',
          prev: '*',
          next: 'block-like',
        },
      ],
    },
  },
];
